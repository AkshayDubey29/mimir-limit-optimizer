name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Lint Helm charts
      run: helm lint ./helm/mimir-limit-optimizer

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, helm-lint]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.title=Mimir Limit Optimizer
          org.opencontainers.image.description=Enterprise-grade Kubernetes-native controller for dynamically managing per-tenant limits in Grafana Mimir
          org.opencontainers.image.vendor=Akshay Dubey
          org.opencontainers.image.licenses=Apache-2.0
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.created }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Update Helm chart version
      run: |
        # Update Chart.yaml with the new version
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}/" helm/mimir-limit-optimizer/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: \"${{ steps.version.outputs.version }}\"/" helm/mimir-limit-optimizer/Chart.yaml
        
        # Verify the changes
        echo "Updated Chart.yaml:"
        cat helm/mimir-limit-optimizer/Chart.yaml
        
    - name: Create charts directory
      run: mkdir -p charts
        
    - name: Package Helm chart
      run: |
        helm package ./helm/mimir-limit-optimizer --destination ./charts/
        ls -la charts/
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🚀 Mimir Limit Optimizer v${{ steps.version.outputs.version }}
        
        ### 🎯 What's New
        - Enterprise-grade Kubernetes-native controller for Grafana Mimir
        - Dynamic per-tenant limit management with intelligent optimization
        - Cost control and budget enforcement capabilities
        - Circuit breaker protection against metric blasts
        - Comprehensive alerting and monitoring integration
        
        ### 📦 Deployment Options
        
        **Docker Image:**
        ```bash
        ghcr.io/akshaydubey29/mimir-limit-optimizer:v${{ steps.version.outputs.version }}
        ```
        
        **Helm Chart:**
        ```bash
        # Add the repository (when published)
        helm repo add mimir-limit-optimizer https://akshaydubey29.github.io/mimir-limit-optimizer
        
        # Install the chart
        helm install mimir-limit-optimizer mimir-limit-optimizer/mimir-limit-optimizer \
          --version ${{ steps.version.outputs.version }} \
          --namespace mimir-limit-optimizer \
          --create-namespace
        ```
        
        **Direct Helm Install:**
        ```bash
        # Download and install the chart directly
        curl -L https://github.com/AkshayDubey29/mimir-limit-optimizer/releases/download/v${{ steps.version.outputs.version }}/mimir-limit-optimizer-${{ steps.version.outputs.version }}.tgz -o mimir-limit-optimizer.tgz
        helm install mimir-limit-optimizer mimir-limit-optimizer.tgz
        ```
        
        ### 🔧 Key Features
        - **Cost Control**: Real-time cost calculation and budget enforcement
        - **Circuit Breaker**: Protection against ingestion spikes and query floods  
        - **Smart Limits**: Dynamic adjustment based on usage patterns
        - **Multi-Mode**: Dry-run for observation, production for enforcement
        - **Enterprise Ready**: Comprehensive alerting, audit logging, and monitoring
        
        ### 📊 Supported Integrations
        - Grafana Mimir (all versions)
        - Prometheus metrics scraping
        - Kubernetes native RBAC
        - Slack, PagerDuty, Email alerting
        - Custom webhook integrations
        
        ### 🛡️ Security & Compliance
        - Container security scanning with Trivy
        - CodeQL security analysis
        - Kubernetes security best practices
        - Audit logging for compliance
        
        ### 📖 Documentation
        - [Installation Guide](https://github.com/AkshayDubey29/mimir-limit-optimizer#installation)
        - [Configuration Reference](https://github.com/AkshayDubey29/mimir-limit-optimizer#configuration)
        - [Operating Modes](https://github.com/AkshayDubey29/mimir-limit-optimizer#operating-modes)
        - [Troubleshooting](https://github.com/AkshayDubey29/mimir-limit-optimizer#troubleshooting)
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Mimir Limit Optimizer v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          charts/*.tgz
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install mimir-limit-optimizer ./helm/mimir-limit-optimizer \
          --namespace mimir-limit-optimizer-staging \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set controller.mode=dry-run \
          --set mimir.namespace=mimir-staging \
          --wait --timeout=5m
          
    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/mimir-limit-optimizer -n mimir-limit-optimizer-staging --timeout=300s
        kubectl get pods -n mimir-limit-optimizer-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install mimir-limit-optimizer ./helm/mimir-limit-optimizer \
          --namespace mimir-limit-optimizer \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.ref_name }} \
          --set controller.mode=prod \
          --set mimir.namespace=mimir \
          --wait --timeout=10m
          
    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/mimir-limit-optimizer -n mimir-limit-optimizer --timeout=600s
        kubectl get pods -n mimir-limit-optimizer
        
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for the controller to be ready
        sleep 30
        # Check if metrics endpoint is accessible
        kubectl port-forward svc/mimir-limit-optimizer 8080:8080 -n mimir-limit-optimizer &
        sleep 10
        curl -f http://localhost:8080/metrics || exit 1
        # Check health endpoint
        kubectl port-forward svc/mimir-limit-optimizer 8081:8081 -n mimir-limit-optimizer &
        sleep 10
        curl -f http://localhost:8081/healthz || exit 1 