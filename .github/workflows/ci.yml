name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python for yamllint
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install yamllint
      run: pip install yamllint
      
    - name: Check yamllint config
      run: |
        echo "🔍 Using yamllint configuration from .yamllint.yml"
        if [ ! -f .yamllint.yml ]; then
          echo "❌ .yamllint.yml configuration file not found!"
          exit 1
        fi
        echo "✅ Found yamllint configuration"
        cat .yamllint.yml
        
    - name: Run strict yamllint on critical files
      run: |
        echo "🔍 Running strict yamllint on critical files (must pass)..."
        # These files must pass strict linting to prevent CI/CD failures
        yamllint .github/workflows/ci.yml
        yamllint helm/mimir-limit-optimizer/Chart.yaml
        echo "✅ Critical files passed strict YAML validation"
        
    - name: Run yamllint on Helm charts
      run: |
        echo "🔍 Running yamllint on Helm charts (static files only)..."
        echo "ℹ️  Note: Helm templates are excluded and validated by helm lint instead"
        EXIT_CODE=0
        yamllint helm/ || EXIT_CODE=$?
        if [ $EXIT_CODE -ne 0 ]; then
          echo "⚠️  YAML linting found issues in Helm charts (warnings allowed)"
          echo "ℹ️  Run 'yamllint helm/' locally to see detailed issues"
        else
          echo "✅ Helm chart static files passed YAML validation"
        fi
        
    - name: Run yamllint on workflow files
      run: |
        echo "🔍 Running yamllint on GitHub workflows..."
        EXIT_CODE=0
        yamllint .github/workflows/ || EXIT_CODE=$?
        if [ $EXIT_CODE -ne 0 ]; then
          echo "⚠️  YAML linting found issues in workflows (warnings allowed)"
          echo "ℹ️  Run 'yamllint .github/workflows/' locally to see detailed issues"
        else
          echo "✅ Workflow files passed YAML validation"
        fi
        
    - name: Validate YAML syntax in static files
      run: |
        echo "🔍 Validating YAML syntax in static YAML files (excluding Helm templates)..."
        
        # Create a simple Python validator script
        cat > validate_yaml.py << 'EOF'
        import yaml
        import sys
        
        def validate_file(filepath):
            try:
                with open(filepath, 'r') as f:
                    yaml.safe_load(f)
                print(f"✅ Valid: {filepath}")
                return True
            except yaml.YAMLError as e:
                print(f"❌ YAML syntax error in: {filepath}")
                print(f"Error: {e}")
                return False
            except Exception as e:
                print(f"⚠️  Could not validate: {filepath}")
                print(f"Error: {e}")
                return False
        
        if __name__ == "__main__":
            filepath = sys.argv[1]
            if not validate_file(filepath):
                sys.exit(1)
        EOF
        
        # Validate static YAML files
        VALIDATION_FAILED=0
        find . -name "*.yml" -o -name "*.yaml" | while read -r file; do
          # Skip directories and files that shouldn't be validated with regular YAML parser
          if [[ "$file" == *".git/"* ]] || \
             [[ "$file" == *"node_modules/"* ]] || \
             [[ "$file" == *"/templates/"* ]] || \
             [[ "$file" == *"_helpers.tpl" ]]; then
            echo "Skipping Helm template: $file"
            continue
          fi
          
          echo "Checking: $file"
          python3 validate_yaml.py "$file" || VALIDATION_FAILED=1
        done
        
        if [ $VALIDATION_FAILED -eq 1 ]; then
          echo "❌ YAML validation failed for one or more files"
          exit 1
        fi
        
        echo "✅ All static YAML files have valid syntax"
        echo "ℹ️  Helm templates are validated separately by helm lint and helm template"
        
        # Clean up
        rm validate_yaml.py
        
    - name: Summary
      run: |
        echo "✅ YAML linting and validation completed"
        echo "📊 Summary:"
        echo "  - Critical files: ✅ PASSED (strict validation)"
        echo "  - Helm chart static files: ✅ CHECKED (warnings allowed)"
        echo "  - Helm templates: ✅ VALIDATED (by helm lint separately)"
        echo "  - Workflows: ✅ CHECKED (warnings allowed)"
        echo "  - Static YAML syntax: ✅ PASSED (all non-template files)"
        echo ""
        echo "💡 To fix YAML issues locally:"
        echo "   # Install yamllint"
        echo "   brew install yamllint      # macOS"
        echo "   pip install yamllint       # Python/pip"
        echo ""
        echo "   # Run yamllint (uses .yamllint.yml config)"
        echo "   yamllint .                  # Check all files"
        echo "   yamllint helm/              # Check Helm charts only"
        echo "   yamllint .github/workflows/ # Check workflows only"
        echo ""
        echo "   # Auto-fix some issues (use with caution)"
        echo "   yamllint --format auto helm/"

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: [yaml-lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Install UI dependencies
      run: |
        cd ui
        npm ci
        
    - name: Build UI
      run: |
        cd ui
        npm run build
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.55.2
        args: --timeout=5m
        
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    needs: [yaml-lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Lint Helm charts
      run: |
        echo "🔍 Running helm lint (validates templates, values, and chart structure)..."
        helm lint ./helm/mimir-limit-optimizer
        echo "✅ Helm chart structure and templates are valid"
        
    - name: Validate Helm template generation
      run: |
        echo "🔍 Testing Helm template generation (validates Go template syntax)..."
        helm template test-release ./helm/mimir-limit-optimizer --dry-run > /dev/null
        echo "✅ Helm templates generate valid Kubernetes manifests"
        
    - name: Test Helm chart with different values
      run: |
        echo "🔍 Testing Helm chart with production values..."
        helm template test-release ./helm/mimir-limit-optimizer \
          --set controller.mode=prod \
          --set costControl.enabled=true \
          --set circuitBreaker.enabled=true \
          --dry-run > /dev/null
        echo "✅ Production configuration templates generate successfully"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [yaml-lint, lint-and-test, helm-lint]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.title=Mimir Limit Optimizer
          org.opencontainers.image.description=Enterprise-grade Kubernetes-native controller for dynamically managing per-tenant limits in Grafana Mimir
          org.opencontainers.image.vendor=Akshay Dubey
          org.opencontainers.image.licenses=Apache-2.0
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.created }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Mimir Limit Optimizer
        
    - name: Output image details
      run: |
        echo "Built and pushed images:"
        echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
          echo "  - $tag"
        done
        echo "Image digest: ${{ steps.build.outputs.digest }}"
        echo "Metadata: ${{ steps.build.outputs.metadata }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for security scan
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Get primary tag for scanning
      id: scan_tag
      run: |
        # Extract the first tag from the metadata output
        TAGS="${{ steps.meta.outputs.tags }}"
        PRIMARY_TAG=$(echo "$TAGS" | head -n1)
        echo "tag=$PRIMARY_TAG" >> $GITHUB_OUTPUT
        echo "Scanning image: $PRIMARY_TAG"
        
    - name: Validate and wait for image
      run: |
        IMAGE_REF="${{ steps.scan_tag.outputs.tag }}"
        echo "Image reference: $IMAGE_REF"
        
        # Validate image reference format
        if [[ ! "$IMAGE_REF" =~ ^[a-z0-9.-]+/[a-z0-9._/-]+:[a-zA-Z0-9._-]+$ ]]; then
          echo "❌ Invalid image reference format: $IMAGE_REF"
          exit 1
        fi
        
        echo "✅ Image reference format is valid"
        echo "Waiting for image $IMAGE_REF to be available..."
        
        for i in {1..30}; do
          if docker manifest inspect "$IMAGE_REF" >/dev/null 2>&1; then
            echo "✅ Image is available!"
            docker manifest inspect "$IMAGE_REF" | head -20
            break
          fi
          echo "Attempt $i/30: Image not yet available, waiting 10 seconds..."
          sleep 10
          if [ $i -eq 30 ]; then
            echo "❌ Image did not become available after 5 minutes"
            echo "Available tags:"
            docker search ghcr.io/akshaydubey29/mimir-limit-optimizer --limit 5 || true
            exit 1
          fi
        done
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ steps.scan_tag.outputs.tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        hide-progress: false
        
    - name: Run Trivy vulnerability scanner (JSON output for logs)
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ steps.scan_tag.outputs.tag }}
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Display scan results
      if: always()
      run: |
        if [ -f trivy-results.json ]; then
          echo "=== Trivy Scan Results ==="
          cat trivy-results.json | jq '.Results[] | select(.Vulnerabilities) | {Target: .Target, Vulnerabilities: .Vulnerabilities | length}'
          echo "=== End Scan Results ==="
        else
          echo "No scan results file found"
        fi
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Upload scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          trivy-results.json
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [yaml-lint, build-and-push, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Update Helm chart version
      run: |
        # Update Chart.yaml with the new version
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}/" helm/mimir-limit-optimizer/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: \"${{ steps.version.outputs.version }}\"/" helm/mimir-limit-optimizer/Chart.yaml
        
        # Verify the changes
        echo "Updated Chart.yaml:"
        cat helm/mimir-limit-optimizer/Chart.yaml
        
    - name: Create charts directory
      run: mkdir -p charts
        
    - name: Package Helm chart
      run: |
        helm package ./helm/mimir-limit-optimizer --destination ./charts/
        ls -la charts/
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🚀 Mimir Limit Optimizer v${{ steps.version.outputs.version }}
        
        ### 🎯 What's New
        - Enterprise-grade Kubernetes-native controller for Grafana Mimir
        - Dynamic per-tenant limit management with intelligent optimization
        - Cost control and budget enforcement capabilities
        - Circuit breaker protection against metric blasts
        - Comprehensive alerting and monitoring integration
        
        ### 📦 Deployment Options
        
        **Docker Image:**
        ```bash
        ghcr.io/akshaydubey29/mimir-limit-optimizer:v${{ steps.version.outputs.version }}
        ```
        
        **Helm Chart:**
        ```bash
        # Add the repository (when published)
        helm repo add mimir-limit-optimizer https://akshaydubey29.github.io/mimir-limit-optimizer
        
        # Install the chart
        helm install mimir-limit-optimizer mimir-limit-optimizer/mimir-limit-optimizer \
          --version ${{ steps.version.outputs.version }} \
          --namespace mimir-limit-optimizer \
          --create-namespace
        ```
        
        **Direct Helm Install:**
        ```bash
        # Download and install the chart directly
        curl -L https://github.com/AkshayDubey29/mimir-limit-optimizer/releases/download/v${{ steps.version.outputs.version }}/mimir-limit-optimizer-${{ steps.version.outputs.version }}.tgz -o mimir-limit-optimizer.tgz
        helm install mimir-limit-optimizer mimir-limit-optimizer.tgz
        ```
        
        ### 🔧 Key Features
        - **Cost Control**: Real-time cost calculation and budget enforcement
        - **Circuit Breaker**: Protection against ingestion spikes and query floods  
        - **Smart Limits**: Dynamic adjustment based on usage patterns
        - **Multi-Mode**: Dry-run for observation, production for enforcement
        - **Enterprise Ready**: Comprehensive alerting, audit logging, and monitoring
        
        ### 📊 Supported Integrations
        - Grafana Mimir (all versions)
        - Prometheus metrics scraping
        - Kubernetes native RBAC
        - Slack, PagerDuty, Email alerting
        - Custom webhook integrations
        
        ### 🛡️ Security & Compliance
        - Container security scanning with Trivy
        - CodeQL security analysis
        - Kubernetes security best practices
        - Audit logging for compliance
        
        ### 📖 Documentation
        - [Installation Guide](https://github.com/AkshayDubey29/mimir-limit-optimizer#installation)
        - [Configuration Reference](https://github.com/AkshayDubey29/mimir-limit-optimizer#configuration)
        - [Operating Modes](https://github.com/AkshayDubey29/mimir-limit-optimizer#operating-modes)
        - [Troubleshooting](https://github.com/AkshayDubey29/mimir-limit-optimizer#troubleshooting)
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Mimir Limit Optimizer v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          charts/*.tgz
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install mimir-limit-optimizer ./helm/mimir-limit-optimizer \
          --namespace mimir-limit-optimizer-staging \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set controller.mode=dry-run \
          --set mimir.namespace=mimir-staging \
          --wait --timeout=5m
          
    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/mimir-limit-optimizer -n mimir-limit-optimizer-staging --timeout=300s
        kubectl get pods -n mimir-limit-optimizer-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install mimir-limit-optimizer ./helm/mimir-limit-optimizer \
          --namespace mimir-limit-optimizer \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.ref_name }} \
          --set controller.mode=prod \
          --set mimir.namespace=mimir \
          --wait --timeout=10m
          
    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/mimir-limit-optimizer -n mimir-limit-optimizer --timeout=600s
        kubectl get pods -n mimir-limit-optimizer
        
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for the controller to be ready
        sleep 30
        # Check if metrics endpoint is accessible
        kubectl port-forward svc/mimir-limit-optimizer 8080:8080 -n mimir-limit-optimizer &
        sleep 10
        curl -f http://localhost:8080/metrics || exit 1
        # Check health endpoint
        kubectl port-forward svc/mimir-limit-optimizer 8081:8081 -n mimir-limit-optimizer &
        sleep 10
        curl -f http://localhost:8081/healthz || exit 1 