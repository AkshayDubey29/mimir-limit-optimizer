{"ast":null,"code":"import React,{createContext,useContext,useState,useCallback}from'react';import axios from'axios';// API base URL - will use proxy in development\nimport{jsx as _jsx}from\"react/jsx-runtime\";const API_BASE='/api';// Types\nconst ApiContext=/*#__PURE__*/createContext(undefined);export const ApiProvider=_ref=>{let{children}=_ref;const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const handleError=useCallback(err=>{if(axios.isAxiosError(err)){var _axiosError$response,_axiosError$response$;const axiosError=err;setError(((_axiosError$response=axiosError.response)===null||_axiosError$response===void 0?void 0:(_axiosError$response$=_axiosError$response.data)===null||_axiosError$response$===void 0?void 0:_axiosError$response$.message)||axiosError.message||'An error occurred');}else if(err instanceof Error){setError(err.message);}else{setError('An unknown error occurred');}},[]);const clearError=useCallback(()=>{setError(null);},[]);const apiCall=useCallback(async fn=>{setLoading(true);setError(null);try{const result=await fn();return result;}catch(err){handleError(err);throw err;}finally{setLoading(false);}},[handleError]);// System APIs\nconst getStatus=useCallback(()=>apiCall(()=>axios.get(\"\".concat(API_BASE,\"/status\")).then(res=>res.data)),[apiCall]);const getConfig=useCallback(()=>apiCall(()=>axios.get(\"\".concat(API_BASE,\"/config\")).then(res=>res.data)),[apiCall]);const updateConfig=useCallback(config=>apiCall(()=>axios.post(\"\".concat(API_BASE,\"/config\"),config).then(res=>res.data)),[apiCall]);// Tenant APIs\nconst getTenants=useCallback(()=>apiCall(()=>axios.get(\"\".concat(API_BASE,\"/tenants\")).then(res=>res.data)),[apiCall]);const getTenantDetail=useCallback(tenantId=>apiCall(()=>axios.get(\"\".concat(API_BASE,\"/tenants/\").concat(tenantId)).then(res=>res.data)),[apiCall]);// Analysis APIs\nconst getDiff=useCallback(()=>apiCall(()=>axios.get(\"\".concat(API_BASE,\"/diff\")).then(res=>res.data)),[apiCall]);const getAudit=useCallback(filters=>apiCall(()=>axios.get(\"\".concat(API_BASE,\"/audit\"),{params:filters}).then(res=>res.data)),[apiCall]);// Test APIs\nconst triggerTestSpike=useCallback((tenantId,multiplier,duration)=>apiCall(()=>axios.post(\"\".concat(API_BASE,\"/test/spike\"),{tenant_id:tenantId,multiplier,duration}).then(res=>res.data)),[apiCall]);const triggerTestAlert=useCallback((channel,message)=>apiCall(()=>axios.post(\"\".concat(API_BASE,\"/test/alert\"),{channel,message}).then(res=>res.data)),[apiCall]);const triggerReconcile=useCallback(()=>apiCall(()=>axios.post(\"\".concat(API_BASE,\"/test/reconcile\")).then(res=>res.data)),[apiCall]);const value={getStatus,getConfig,updateConfig,getTenants,getTenantDetail,getDiff,getAudit,triggerTestSpike,triggerTestAlert,triggerReconcile,loading,error,clearError};return/*#__PURE__*/_jsx(ApiContext.Provider,{value:value,children:children});};export const useApi=()=>{const context=useContext(ApiContext);if(context===undefined){throw new Error('useApi must be used within an ApiProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}